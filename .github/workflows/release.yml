name: Release

on:
  workflow_dispatch:

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm ci
      - run: npm run lint

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm ci
      - run: npm run test

  create_release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
      IMAGE_NAME: app
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_SA_KEY }}

      - name: Build Docker Image
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_BASE_NAME="cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}"
          docker build -t "$IMAGE_BASE_NAME:$VERSION" -t "$IMAGE_BASE_NAME:${VERSION}_latest" .

      - name: Push Docker Image
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_BASE_NAME="cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}"
          docker push "$IMAGE_BASE_NAME:$VERSION"
          docker push "$IMAGE_BASE_NAME:${VERSION}_latest"

      - name: Get latest release tag
        id: get_latest_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 --exclude='releases/*' 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Get commits since last release
        id: get_commits
        run: |
          COMMITS=$(git log --pretty=format:"* %h %s (%an)" ${{ steps.get_latest_tag.outputs.LAST_TAG }}..HEAD)
          COMMIT_LIST=$(echo "$COMMITS" | sed 's/^/* /') # Ensure each commit starts with a bullet
          echo "COMMIT_LIST<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ github.run_number }}
          RELEASE_AUTHOR=${{ github.actor }}
          RELEASE_DATE=$(date +'%Y-%m-%d %H:%M:%S %Z')
          DOCKER_IMAGE_URL="cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:$RELEASE_VERSION"

          gh issue create --title "Release v$RELEASE_VERSION" --body "\
          ### Информация о релизе

          - **Дата:** $RELEASE_DATE
          - **Автор:** $RELEASE_AUTHOR
          - **Версия:** $RELEASE_VERSION
          - **Образ Docker:** [$DOCKER_IMAGE_URL]($DOCKER_IMAGE_URL)

          ### Коммиты в этом релизе:
          ${{ steps.get_commits.outputs.COMMIT_LIST }}
          "

      - name: Update CHANGELOG.md
        id: update_changelog
        run: |
          RELEASE_VERSION=${{ github.run_number }}
          RELEASE_DATE=$(date +'%Y-%m-%d')
          NEW_CHANGELOG_ENTRY="## v$RELEASE_VERSION - $RELEASE_DATE\\n\\n${{ steps.get_commits.outputs.COMMIT_LIST }}\\n\\n"

          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
          fi

          CURRENT_CHANGELOG=$(cat CHANGELOG.md)
          echo -e "$NEW_CHANGELOG_ENTRY$CURRENT_CHANGELOG" > CHANGELOG.md

      - name: Commit CHANGELOG.md update
        run: |
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for v${{ github.run_number }}"
          git push

      - name: Create Git Tag
        run: |
          git tag -a v${{ github.run_number }} -m "Release v${{ github.run_number }}"
          git push origin v${{ github.run_number }}

      - name: Create Release Branch
        run: |
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}
